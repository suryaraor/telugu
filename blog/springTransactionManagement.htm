<HTML>
<BODY>
</BODY>
<a href="../index.html">Home</a>
Traditionally, Java EE developers have had two choices for transaction management: global or local transactions, both of which have profound limitations. 
Global transactions
Global transactions enable you to work with multiple transactional resources, typically relational databases and message queues. 
The application server manages global transactions through the JTA, which is a cumbersome API to use (partly due to its exception model). 
Furthermore, a JTA UserTransaction normally needs to be sourced from JNDI, meaning that you also need to use JNDI in order to use JTA. 
Obviously the use of global transactions would limit any potential reuse of application code, as JTA is normally only available in an application server environment.
Previously, the preferred way to use global transactions was via EJB CMT (Container Managed Transaction): CMT is a form of declarative transaction management (as distinguished from programmatic transaction management). EJB CMT removes the need for transaction-related JNDI lookups, although of course the use of EJB itself necessitates the use of JNDI. It removes most but not all of the need to write Java code to control transactions. The significant downside is that CMT is tied to JTA and an application server environment. Also, it is only available if one chooses to implement business logic in EJBs, or at least behind a transactional EJB facade. The negatives of EJB in general are so great that this is not an attractive proposition, especially in the face of compelling alternatives for declarative transaction management.
</HTML>
